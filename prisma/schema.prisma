generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    about         String?
    emailVerified DateTime?

    username           String?     @unique
    image              String?
    hashedPassword     String?
    role               UserRole    @default(USER)
    isProfileInfoSet   Boolean?    @default(false)
    createdAt          DateTime    @default(now())
    createdCommunities Community[] @relation("CreatedBy")

    accounts     Account[]
    sessions     Session[]
    Post         Post[]
    articles     Article[]
    Comment      Comment[]
    Subscription Subscription[]
    Vote         Vote[]
    CommentVote  CommentVote[]
    likes        Like[]
    bookmarks    Bookmark[]

    isPremium Boolean @default(false)

    products               Product[]
    productsUpvotes        ProductUpvote[]
    launchPadcomments      LaunchPadComment[]
    following              Follow[]                @relation("Following")
    followers              Follow[]                @relation("Followers")
    receivedNotifications  Notification[]          @relation("Recipient")
    issuedNotifications    Notification[]          @relation("Issuer")
    launchPadNotifications LaunchPadNotification[]
    createdJobs            Job[]                   @relation("JobCreator")
    savedJobs              Job[]                   @relation("SavedJobs")
}

model Product {
    id            String                  @id @default(cuid())
    name          String
    slug          String                  @unique
    headline      String
    rank          Int
    description   String
    logo          String
    releaseDate   String
    website       String
    twitter       String
    discord       String
    upvotes       ProductUpvote[]
    images        LaunchPadImage[]
    categories    LaunchPadCategory[] // Many-to-many relation with Category
    createdAt     DateTime                @default(now())
    updatedAt     DateTime                @updatedAt
    user          User                    @relation(fields: [userId], references: [id])
    userId        String
    status        Status                  @default(PENDING)
    notifications LaunchPadNotification[]
    comments      LaunchPadComment[]

    @@index([userId])
    @@index([status])
}

model LaunchPadImage {
    id        String   @id @default(cuid())
    productId String
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    url       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([productId])
}

model LaunchPadNotification {
    id             String                      @id @default(cuid())
    userId         String
    user           User                        @relation(fields: [userId], references: [id])
    body           String?                     @db.Text
    profilePicture String
    productId      String
    commentId      String?
    product        Product                     @relation(fields: [productId], references: [id], onDelete: Cascade)
    type           LaunchPadNotificationType
    status         LaunchPadNotificationStatus @default(UNREAD)
    createdAt      DateTime                    @default(now())
    updatedAt      DateTime                    @updatedAt

    @@index([userId])
    @@index([productId])
}

model LaunchPadCategory {
    id       String    @id @default(cuid())
    name     String    @unique
    products Product[] // Many-to-many relation with Product
}

model Community {
    id          String         @id @default(cuid())
    name        String         @unique
    description String?
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt
    creatorId   String?
    posts       Post[]
    Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
    subscribers Subscription[]

    @@index([name])
    @@index([creatorId])
}

model Subscription {
    userId      String
    communityId String
    user        User      @relation(fields: [userId], references: [id])
    community   Community @relation(fields: [communityId], references: [id])

    @@id([userId, communityId])
    @@index([communityId])
    @@index([userId])
}

model Post {
    id                  String         @id @default(cuid())
    title               String
    content             Json?
    createdAt           DateTime       @default(now())
    updatedAt           DateTime       @updatedAt
    published           Boolean        @default(false)
    communityId         String
    authorId            String
    community           Community      @relation(fields: [communityId], references: [id])
    attachments         Media[]
    author              User           @relation(fields: [authorId], references: [id])
    likes               Like[]
    bookmarks           Bookmark[]
    comments            Comment[]
    votes               Vote[]
    linkedNotifications Notification[]

    @@index([communityId])
    @@index([authorId])
}

model Media {
    id        String    @id @default(cuid())
    postId    String?
    type      MediaType
    url       String
    createdAt DateTime  @default(now())
    post      Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)

    @@index([postId])
    @@map("post_media")
}

model Article {
    id        String   @id @default(cuid())
    title     String
    content   Json?
    published Boolean  @default(false)
    authorId  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    author    User     @relation(fields: [authorId], references: [id])

    @@index([authorId])
}

model Comment {
    id        String        @id @default(cuid())
    text      String
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    authorId  String
    postId    String
    replyToId String?
    commentId String?
    author    User          @relation(fields: [authorId], references: [id])
    post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
    replyTo   Comment?      @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    replies   Comment[]     @relation("ReplyTo")
    votes     CommentVote[]

    @@index([authorId])
    @@index([postId])
    @@index([replyToId])
}

model LaunchPadComment {
    id             String   @id @default(cuid())
    profilePicture String
    productId      String
    product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    userId         String
    user           User     @relation(fields: [userId], references: [id])
    body           String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    @@index([productId])
    @@index([userId])
}

model Like {
    userId String
    postId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
    @@index([postId])
    @@map("likes")
}

model Vote {
    userId String
    postId String
    type   VoteType
    user   User     @relation(fields: [userId], references: [id])
    post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@id([userId, postId])
    @@index([postId])
    @@index([userId])
}

model CommentVote {
    userId    String
    commentId String
    type      VoteType
    user      User     @relation(fields: [userId], references: [id])
    comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

    @@id([userId, commentId])
    @@index([commentId])
    @@index([userId])
}

model ProductUpvote {
    id        String   @id @default(cuid())
    productId String
    product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, productId])
    @@index([productId])
}

model Bookmark {
    id        String   @id @default(cuid())
    userId    String
    postId    String
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@unique([userId, postId])
    @@index([postId])
    @@map("bookmarks")
}

model Follow {
    followerId  String
    followingId String
    follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
    following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

    @@unique([followerId, followingId])
    @@index([followerId])
    @@index([followingId])
    @@map("follows")
}

model Job {
    id               String  @id @default(cuid())
    slug             String  @unique
    title            String
    type             String
    locationType     String
    location         String?
    description      String? @db.Text
    salary           Int
    companyName      String
    applicationEmail String?
    applicationUrl   String?
    companyLogoUrl   String?
    user             User    @relation("JobCreator", fields: [userId], references: [id])

    userId String

    yearsOfExperience String?
    workMode          String?
    isPublished       Boolean      @default(false)
    categoryId        String?
    category          JobCategory? @relation(fields: [categoryId], references: [id])

    tags    Tag[] // Relation to Tag modelapproved         Boolean  @default(false)
    savedBy User[] @relation("SavedJobs") // Relation to User model for saved jobs

    approved  Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([categoryId])
    @@fulltext([title])
    @@fulltext([title, description, companyName, location, type])
    @@map("jobs")
}

model JobCategory {
    id   String @id @default(cuid())
    name String @unique
    jobs Job[]
}

model Tag {
    id        Int      @id @default(autoincrement())
    name      String   @unique
    jobs      Job[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("tags")
}

model Notification {
    id          String           @id @default(cuid())
    recipientId String
    issuerId    String
    postId      String?
    type        NotificationType
    read        Boolean          @default(false)
    createdAt   DateTime         @default(now())
    recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)
    issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
    post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)

    @@index([recipientId])
    @@index([issuerId])
    @@index([postId])
    @@map("notifications")
}

model Essay {
    id             String     @id @default(cuid())
    title          String
    link           String     @unique
    contentSnippet String?
    pubDate        DateTime
    description    String?
    categories     Category[]
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt

    @@index([pubDate])
}

model Category {
    id          String   @id @default(cuid())
    name        String   @unique
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    Essays      Essay[]
}

model ProductHuntPost {
    id           String   @id
    name         String
    tagline      String
    description  String?  @db.Text
    url          String
    votesCount   Int
    createdAt    DateTime
    thumbnailUrl String?
    website      String?
    topics       Topic[]
    updatedAt    DateTime @updatedAt
}

model Topic {
    id    String            @id @default(cuid())
    name  String            @unique
    posts ProductHuntPost[]
}

enum UserRole {
    ADMIN
    USER
}

enum MediaType {
    IMAGE
    VIDEO
}

enum VoteType {
    UPVOTE
    DOWNVOTE
}

enum NotificationType {
    LIKE
    FOLLOW
    COMMENT
}

enum Status {
    PENDING
    ACTIVE
    REJECTED
}

enum LaunchPadNotificationStatus {
    UNREAD
    READ
}

enum LaunchPadNotificationType {
    UPVOTE
    COMMENT
    ACTIVATED
    REJECTED
}
