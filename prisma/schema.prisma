// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  about        String? 
  emailVerified DateTime?

  createdCommunities Community[] @relation("CreatedBy")

  username String? @unique

  image    String?
  hashedPassword String?
  accounts Account[]
  sessions Session[]
  Post Post[]
  articles Article[]

  isProfileInfoSet Boolean? @default(false)
  createdAt DateTime @default(now())



  Comment Comment[]
  Subscription Subscription[]
  Vote Vote[]
  CommentVote CommentVote[]
  followers User[] @relation(name: "Followers") // Users that follow me
  follows User[] @relation(name: "Followers") // Users that I follow
    // GitHubRepo GitHubRepo[] // New relationship for GitHub repositories
}

model Community {
  id        String   @id @default(cuid())
  name      String   @unique
  description  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  creatorId   String?
  Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  subscribers Subscription[]
  @@index([name])
}

model Subscription {
  user User @relation(fields: [userId], references: [id])
  userId String
  community Community @relation(fields: [communityId], references: [id])
  communityId String
  @@id ([userId,communityId])
}

model Post {
  
    id String @id @default(cuid())
  
    title String
    content Json?
    // slug String @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  
    published Boolean @default(false)
    community Community @relation(fields: [communityId], references: [id])
    communityId String

    author User @relation(fields: [authorId], references: [id])
    authorId String

  // categories Category[]
  // tags      Tag[]

    comments Comment[]
    votes Vote[]
  
}

model Article {
  id        String    @id @default(cuid())
  title     String
  content   Json?
  published Boolean   @default(false)

  author    User      @relation(fields: [authorId], references: [id])
  authorId String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}




model Comment {
    
      id String @id @default(cuid())

      text String
        
      createdAt DateTime @default(now())
      updatedAt DateTime @updatedAt
    
      author User @relation(fields: [authorId], references: [id])
      authorId String
    
      post Post @relation(fields: [postId], references: [id] , onDelete: Cascade)
      postId String

      replyToId String?
      replyTo Comment? @relation("ReplyTo", fields: [replyToId], references: [id] , onDelete: NoAction , onUpdate: NoAction)
      replies Comment[] @relation("ReplyTo")

      votes CommentVote[]
      commentId String?
    
}

model Vote {
  user User @relation(fields: [userId], references: [id])
  userId String
  post Post @relation(fields: [postId], references: [id] , onDelete: Cascade)
  postId String
  type VoteType
  @@id ([userId,postId])
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
model CommentVote {
  user User @relation(fields: [userId], references: [id])
  userId String
  comment Comment @relation(fields: [commentId], references: [id] , onDelete: Cascade)
  commentId String
  type VoteType
  @@id ([userId,commentId])
}

// model Category {
//   id    String     @id @default(cuid())
//   name  String  @unique
//   posts Post[]
// }

// model Tag {
//   id    String     @id @default(cuid())
//   name  String  @unique
//   posts Post[]
// }



// // model GitHubRepo {
//   id        String   @id @default(cuid())
//   name      String
//   fullName  String
//   url       String
//   createdAt DateTime
//   updatedAt DateTime @updatedAt
//   owner     User     @relation(fields: [ownerId], references: [id])
//   ownerId   String
// }